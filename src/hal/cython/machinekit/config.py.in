# access configure (and eventually runtime) variables           -*-python-*-
# from Python
#
# use like so:
# import machinekit.config
# c = machinekit.config.Config()
# if c.is_rt():
#    ....
# define useful aggregate methods in Config() - this is preferrable to
# tests of raw config variables in usercode
#
# edit src/machinekitcfg.py-tmp.in
# run src/configure
# this will build lib/python/machinekit/config.py
#
# Author: Michael Haberler <license AT mah DOT priv DOT at>
# License: GPL Version 2 or later
# Copyright (c) 2013 All rights reserved.
import sys
if sys.version_info >= (3, 0):
    import configparser
else:
    import ConfigParser as configparser

_cfg = None  # global ConfigParser object


# type guessing helpers from http://stackoverflow.com/questions/7019283/automatically-type-cast-parameters-in-python
def __boolify(s):
    if s == 'True' or s == 'true':
        return True
    if s == 'False' or s == 'false':
        return False
    raise ValueError('Not Boolean Value!')


def __estimateType(var):
    '''guesses the str representation of the variables type'''
    for caster in (__boolify, int, float, str):
        try:
            return caster(var)
        except ValueError:
            pass
    return var


# loads a ini file to the config
def load_ini(iniName):
    global _cfg
    if _cfg is None:
        _cfg = configparser.ConfigParser()
    _cfg.read(iniName)


# find a config entry, compatible to machinekit.ini
# note: the module acts as singleton
def find(section, option, default=None):
    if _cfg is None:
        return default
    try:
        return __estimateType(_cfg.get(section, option))
    except (configparser.NoOptionError, configparser.NoSectionError):
        return default


class Config(object):

    def does_io(self):
        if self.BUILD_DRIVERS: return True

    # automatic substitution by configure starts here

    def __init__(self):
        self.GIT_VERSION = "@GIT_VERSION@"
        self.GIT_CONFIG_SHA="@GIT_CONFIG_SHA@"
        self.EMC2_HOME = "@PROJECT_BINARY_DIR@"
        self.MACHINEKIT_INI="@PROJECT_SYSCONF_DIR@/machinekit/machinekit.ini"
        self.BUILD_THREAD_FLAVORS="@BUILD_THREAD_FLAVORS@"

        # Directories
        self.LIB_DIR="@PROJECT_BINARY_DIR@/lib"
        self.EMC2_BIN_DIR="@PROJECT_BIN_DIR@"
        self.EMC2_LIBEXEC_DIR="@PROJECT_LIBEXEC_DIR@"
        self.EMC2_RTLIB_DIR="@PROJECT_LIBEXEC_DIR@"
        self.REALTIME="@PROJECT_BIN_DIR@/realtime"

        self.USE_PORTABLE_PARPORT_IO = "@USE_PORTABLE_PARPORT_IO@"
        self.TARGET_PLATFORM_PC = "@TARGET_PLATFORM_PC@"
        self.TARGET_PLATFORM_BEAGLEBONE = "@TARGET_PLATFORM_BEAGLEBONE@"
        self.TARGET_PLATFORM_RASPBERRY = "@TARGET_PLATFORM_RASPBERRY@"
        self.ARCHITECTURE="@ARCHITECTURE@"

        self.USERMODE_PCI="@USERMODE_PCI@"

# global Config exposes variable to module
__config = Config()
for attr in dir(__config):
    if not attr.startswith("__"):
        setattr(sys.modules[__name__], attr, getattr(__config, attr))
